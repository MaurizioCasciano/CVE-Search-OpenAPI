import json
import os
from typing import List

from fastapi import APIRouter, FastAPI

from openapi.domain.CVEProduct import CVEProduct

from lib.DatabaseLayer import cvesForCPE

from lib.CVEs import CveHandler

app = FastAPI()
router = APIRouter()


@router.get("/cvefor/{cpe}", response_model=List[CVEProduct])
async def cves_from_cpe(cpe: str) -> List[CVEProduct]:
    '''print(cpe)

    list_cves: List[CVEProduct] = []

    cmd = "../bin/search.py -a -p " + cpe + " -o json --only-if-vulnerable > ./output.json"
    os.system(cmd)

    with open("./output.json") as f:
        output = json.loads("[" + f.read().replace("}\n{", "},\n{") + "]")

    for o in output:
        cve = CVEProduct(**o)
        list_cves.append(cve)

    return list_cves'''

    result = cvesForCPE(cpe, vulnProdSearch=True, strict_vendor_product=False)
    print(list(result["results"]))
    print("TYPE result: ", type(result))
    cveProducts = result["results"]
    print("cveProducts: ", cveProducts)
    print("TYPE cveProducts: ", type(cveProducts))
    #cveProducts = map(lambda input: CVEProduct(**input), cveProducts)

    cve_handler = CveHandler(rankinglookup=False, namelookup=False, capeclookup=True)

    cveProductsParsed = []
    for cve_product in cveProducts:
        cve_prod_parsed = CVEProduct.parse_obj(cve_product)
        print("TYPE cve_product: ", type(cve_product))
        print("TYPE c_parsed: ", type(cve_prod_parsed))
        if cve_prod_parsed.cwe and cve_prod_parsed.cwe != "unknown":
            cwe = cve_prod_parsed.cwe.split("-")[1]
            capec = cve_handler.getcapec(cweid=cwe)
            cve_prod_parsed.capec = cve_handler.getcapec(cweid=cwe)
            print(cwe)
            print(capec)
            print(cve_prod_parsed.capec)
        cveProductsParsed.append(cve_prod_parsed)

    #print(cveProducts)

    return cveProductsParsed
