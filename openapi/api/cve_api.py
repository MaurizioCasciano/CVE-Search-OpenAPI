import json
import os
from typing import List

from fastapi import APIRouter, FastAPI

from openapi.domain.CVEProduct import CVEProduct

from lib.DatabaseLayer import cvesForCPE

from lib.CVEs import CveHandler

app = FastAPI()
router = APIRouter()


@router.get("/cvefor/{cpe}", response_model=List[CVEProduct])
async def cves_from_cpe(cpe: str) -> List[CVEProduct]:
    '''print(cpe)

    list_cves: List[CVEProduct] = []

    cmd = "../bin/search.py -a -p " + cpe + " -o json --only-if-vulnerable > ./output.json"
    os.system(cmd)

    with open("./output.json") as f:
        output = json.loads("[" + f.read().replace("}\n{", "},\n{") + "]")

    for o in output:
        cve = CVEProduct(**o)
        list_cves.append(cve)

    return list_cves'''

    result: dict[str, object] = cvesForCPE(cpe, vulnProdSearch=True, strict_vendor_product=False)
    cveProducts: List[CVEProduct] = result["results"]
    cveProducts = map(lambda input: CVEProduct(**input), cveProducts)

    cve_handler = CveHandler(rankinglookup=False, namelookup=False, capeclookup=True)

    for cve_product in cveProducts:
        if cve_product.cwe and cve_product.cwe != "unknown":
            cve_product.capec = cve_handler.getcapec(cweid=(cve_product.cwe.split("-")[1]))

    print(cveProducts)

    return cveProducts
